{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, adminService, route) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.adminService = adminService;\n    this.route = route;\n    this.hide = true;\n  }\n  ngOnInit() {\n    this.criarFormulario();\n  }\n  criarFormulario() {\n    this.formLogin = this.formBuilder.group({\n      usuario: ['', [Validators.required]],\n      senha: ['', [Validators.required, Validators.minLength(8)]]\n    });\n    this.formCadastro = this.formBuilder.group({\n      nomeCad: ['', [Validators.required]],\n      usuarioCad: ['', [Validators.required]],\n      senhaCad: ['', [Validators.required, Validators.minLength(8)]],\n      senhaConfirma: ['', [Validators.required, Validators.minLength(8)]],\n      admnistrativoCad: ['', [Validators.required]]\n    });\n  }\n  login() {\n    if (!this.formLogin.valid) {\n      return;\n    }\n    this.authService.login(this.formLogin.getRawValue()).subscribe(user => {\n      this.route.navigate(['home']);\n    }, error => {\n      alert('erro ao tentar fazer o login');\n    });\n  }\n  confirma() {\n    if (!this.formCadastro.valid) {\n      return;\n    }\n    this.adminService.inserir(this.formCadastro.getRawValue()).subscribe(admin => {\n      this.route.navigate(['']);\n    }, error => {\n      alert('erro ao gravar usuario');\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","formBuilder","authService","adminService","route","hide","ngOnInit","criarFormulario","formLogin","group","usuario","required","senha","minLength","formCadastro","nomeCad","usuarioCad","senhaCad","senhaConfirma","admnistrativoCad","login","valid","getRawValue","subscribe","user","navigate","error","alert","confirma","inserir","admin","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/claudioneves/portal-acesso/src/app/auth/login/login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AutenticacaoService } from '../autenticacao.service';\nimport { AdministrativoService } from '../administrativo.service';\nimport { Route, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  hide = true;\n\n  formLogin!: FormGroup;\n  formCadastro!: FormGroup;\n\n  constructor(private readonly formBuilder: FormBuilder,\n    private authService: AutenticacaoService,\n    private adminService: AdministrativoService,\n    private route: Router){}\n\n  ngOnInit(): void {\n    this.criarFormulario();\n  }\n\n  criarFormulario(): void{\n    this.formLogin = this.formBuilder.group({\n      usuario: ['', [Validators.required]],\n      senha: ['', [Validators.required, Validators.minLength(8)]]\n    })\n\n    this.formCadastro = this.formBuilder.group({\n        nomeCad: ['', [Validators.required]],\n        usuarioCad: ['', [Validators.required]],\n        senhaCad: ['', [Validators.required, Validators.minLength(8)]],\n        senhaConfirma: ['', [Validators.required, Validators.minLength(8)]],\n        admnistrativoCad:['', [Validators.required]]\n      })\n  }\n\n  login(){\n    if(!this.formLogin.valid){\n      return;\n    }\n    this.authService.login(this.formLogin.getRawValue()).subscribe(user => {\n      this.route.navigate(['home'])\n    },(error) => {\n      alert('erro ao tentar fazer o login')\n    });\n  }\n\n  confirma(){\n    if(!this.formCadastro.valid){\n      return;\n    }\n    this.adminService.inserir(this.formCadastro.getRawValue()).subscribe(admin => {\n        this.route.navigate([''])\n    },(error) => {\n        alert('erro ao gravar usuario')\n      });\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YAA6BC,WAAwB,EAC3CC,WAAgC,EAChCC,YAAmC,EACnCC,KAAa;IAHM,KAAAH,WAAW,GAAXA,WAAW;IAC9B,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,KAAK,GAALA,KAAK;IARf,KAAAC,IAAI,GAAG,IAAI;EAQc;EAEzBC,QAAQA,CAAA;IACN,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAA,eAAeA,CAAA;IACb,IAAI,CAACC,SAAS,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MACtCC,OAAO,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,CAAC,CAAC;MACpCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC;KAC3D,CAAC;IAEF,IAAI,CAACC,YAAY,GAAG,IAAI,CAACb,WAAW,CAACQ,KAAK,CAAC;MACvCM,OAAO,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACa,QAAQ,CAAC,CAAC;MACpCK,UAAU,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACa,QAAQ,CAAC,CAAC;MACvCM,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACnB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DK,aAAa,EAAE,CAAC,EAAE,EAAE,CAACpB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEM,gBAAgB,EAAC,CAAC,EAAE,EAAE,CAACrB,UAAU,CAACa,QAAQ,CAAC;KAC5C,CAAC;EACN;EAEAS,KAAKA,CAAA;IACH,IAAG,CAAC,IAAI,CAACZ,SAAS,CAACa,KAAK,EAAC;MACvB;;IAEF,IAAI,CAACnB,WAAW,CAACkB,KAAK,CAAC,IAAI,CAACZ,SAAS,CAACc,WAAW,EAAE,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MACpE,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC,EAAEC,KAAK,IAAI;MACVC,KAAK,CAAC,8BAA8B,CAAC;IACvC,CAAC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAG,CAAC,IAAI,CAACd,YAAY,CAACO,KAAK,EAAC;MAC1B;;IAEF,IAAI,CAAClB,YAAY,CAAC0B,OAAO,CAAC,IAAI,CAACf,YAAY,CAACQ,WAAW,EAAE,CAAC,CAACC,SAAS,CAACO,KAAK,IAAG;MACzE,IAAI,CAAC1B,KAAK,CAACqB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,EAAEC,KAAK,IAAI;MACRC,KAAK,CAAC,wBAAwB,CAAC;IACjC,CAAC,CAAC;EACJ;CACH;AApDY5B,cAAc,GAAAgC,UAAA,EAL1BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWnC,cAAc,CAoD1B;SApDYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}